{"ast":null,"code":"'use client';\n\nimport { cssVars, getBoxShadow, toTransformOrigin } from \"./chunk-6WT2JRWX.mjs\";\n\n// src/modifiers.ts\nvar matchWidth = {\n  name: \"matchWidth\",\n  enabled: true,\n  phase: \"beforeWrite\",\n  requires: [\"computeStyles\"],\n  fn: _ref => {\n    let {\n      state\n    } = _ref;\n    state.styles.popper.width = `${state.rects.reference.width}px`;\n  },\n  effect: _ref2 => {\n    let {\n      state\n    } = _ref2;\n    return () => {\n      const reference = state.elements.reference;\n      state.elements.popper.style.width = `${reference.offsetWidth}px`;\n    };\n  }\n};\nvar transformOrigin = {\n  name: \"transformOrigin\",\n  enabled: true,\n  phase: \"write\",\n  fn: _ref3 => {\n    let {\n      state\n    } = _ref3;\n    setTransformOrigin(state);\n  },\n  effect: _ref4 => {\n    let {\n      state\n    } = _ref4;\n    return () => {\n      setTransformOrigin(state);\n    };\n  }\n};\nvar setTransformOrigin = state => {\n  state.elements.popper.style.setProperty(cssVars.transformOrigin.var, toTransformOrigin(state.placement));\n};\nvar positionArrow = {\n  name: \"positionArrow\",\n  enabled: true,\n  phase: \"afterWrite\",\n  fn: _ref5 => {\n    let {\n      state\n    } = _ref5;\n    setArrowStyles(state);\n  }\n};\nvar setArrowStyles = state => {\n  var _a;\n  if (!state.placement) return;\n  const overrides = getArrowStyle(state.placement);\n  if (((_a = state.elements) == null ? void 0 : _a.arrow) && overrides) {\n    Object.assign(state.elements.arrow.style, {\n      [overrides.property]: overrides.value,\n      width: cssVars.arrowSize.varRef,\n      height: cssVars.arrowSize.varRef,\n      zIndex: -1\n    });\n    const vars = {\n      [cssVars.arrowSizeHalf.var]: `calc(${cssVars.arrowSize.varRef} / 2 - 1px)`,\n      [cssVars.arrowOffset.var]: `calc(${cssVars.arrowSizeHalf.varRef} * -1)`\n    };\n    for (const property in vars) {\n      state.elements.arrow.style.setProperty(property, vars[property]);\n    }\n  }\n};\nvar getArrowStyle = placement => {\n  if (placement.startsWith(\"top\")) {\n    return {\n      property: \"bottom\",\n      value: cssVars.arrowOffset.varRef\n    };\n  }\n  if (placement.startsWith(\"bottom\")) {\n    return {\n      property: \"top\",\n      value: cssVars.arrowOffset.varRef\n    };\n  }\n  if (placement.startsWith(\"left\")) {\n    return {\n      property: \"right\",\n      value: cssVars.arrowOffset.varRef\n    };\n  }\n  if (placement.startsWith(\"right\")) {\n    return {\n      property: \"left\",\n      value: cssVars.arrowOffset.varRef\n    };\n  }\n};\nvar innerArrow = {\n  name: \"innerArrow\",\n  enabled: true,\n  phase: \"main\",\n  requires: [\"arrow\"],\n  fn: _ref6 => {\n    let {\n      state\n    } = _ref6;\n    setInnerArrowStyles(state);\n  },\n  effect: _ref7 => {\n    let {\n      state\n    } = _ref7;\n    return () => {\n      setInnerArrowStyles(state);\n    };\n  }\n};\nvar setInnerArrowStyles = state => {\n  if (!state.elements.arrow) return;\n  const inner = state.elements.arrow.querySelector(\"[data-popper-arrow-inner]\");\n  if (!inner) return;\n  const boxShadow = getBoxShadow(state.placement);\n  if (boxShadow) {\n    inner.style.setProperty(\"--popper-arrow-default-shadow\", boxShadow);\n  }\n  Object.assign(inner.style, {\n    transform: \"rotate(45deg)\",\n    background: cssVars.arrowBg.varRef,\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    position: \"absolute\",\n    zIndex: \"inherit\",\n    boxShadow: `var(--popper-arrow-shadow, var(--popper-arrow-default-shadow))`\n  });\n};\nexport { matchWidth, transformOrigin, positionArrow, innerArrow };","map":{"version":3,"mappings":"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","names":["matchWidth","name","enabled","phase","requires","fn","_ref","state","styles","popper","width","rects","reference","effect","_ref2","elements","style","offsetWidth","transformOrigin","_ref3","setTransformOrigin","_ref4","setProperty","cssVars","var","toTransformOrigin","placement","positionArrow","_ref5","setArrowStyles","overrides","getArrowStyle","_a","arrow","Object","assign","property","value","arrowSize","varRef","height","zIndex","vars","arrowSizeHalf","arrowOffset","startsWith","innerArrow","_ref6","setInnerArrowStyles","_ref7","inner","querySelector","boxShadow","getBoxShadow","transform","background","arrowBg","top","left","position"],"sources":["C:\\Users\\Admin\\node_modules\\@chakra-ui\\popper\\src\\modifiers.ts"],"sourcesContent":["import { Placement, Modifier, State } from \"@popperjs/core\"\nimport { getBoxShadow, toTransformOrigin, cssVars } from \"./utils\"\n\n/* -------------------------------------------------------------------------------------------------\n The match width modifier sets the popper width to match the reference.\n It is useful for custom selects, autocomplete, etc.\n* -----------------------------------------------------------------------------------------------*/\n\nexport const matchWidth: Modifier<\"matchWidth\", any> = {\n  name: \"matchWidth\",\n  enabled: true,\n  phase: \"beforeWrite\",\n  requires: [\"computeStyles\"],\n  fn: ({ state }) => {\n    state.styles.popper.width = `${state.rects.reference.width}px`\n  },\n  effect:\n    ({ state }) =>\n    () => {\n      const reference = state.elements.reference as HTMLElement\n      state.elements.popper.style.width = `${reference.offsetWidth}px`\n    },\n}\n\n/* -------------------------------------------------------------------------------------------------\n  The transform origin modifier sets the css `transformOrigin` value of the popper\n  based on the dynamic placement state of the popper.\n  \n  Useful when we need to animate/transition the popper.\n* -----------------------------------------------------------------------------------------------*/\n\nexport const transformOrigin: Modifier<\"transformOrigin\", any> = {\n  name: \"transformOrigin\",\n  enabled: true,\n  phase: \"write\",\n  fn: ({ state }) => {\n    setTransformOrigin(state)\n  },\n  effect:\n    ({ state }) =>\n    () => {\n      setTransformOrigin(state)\n    },\n}\n\nconst setTransformOrigin = (state: State) => {\n  state.elements.popper.style.setProperty(\n    cssVars.transformOrigin.var,\n    toTransformOrigin(state.placement),\n  )\n}\n\n/* -------------------------------------------------------------------------------------------------\n  The position arrow modifier adds width, height and overrides the `top/left/right/bottom`\n  styles generated by popper.js to properly position the arrow\n* -----------------------------------------------------------------------------------------------*/\n\nexport const positionArrow: Modifier<\"positionArrow\", any> = {\n  name: \"positionArrow\",\n  enabled: true,\n  phase: \"afterWrite\",\n  fn: ({ state }) => {\n    setArrowStyles(state)\n  },\n}\n\nconst setArrowStyles = (state: Partial<State>) => {\n  if (!state.placement) return\n  const overrides = getArrowStyle(state.placement)\n\n  if (state.elements?.arrow && overrides) {\n    Object.assign(state.elements.arrow.style, {\n      [overrides.property]: overrides.value,\n      width: cssVars.arrowSize.varRef,\n      height: cssVars.arrowSize.varRef,\n      zIndex: -1,\n    })\n\n    const vars = {\n      [cssVars.arrowSizeHalf\n        .var]: `calc(${cssVars.arrowSize.varRef} / 2 - 1px)`,\n      [cssVars.arrowOffset.var]: `calc(${cssVars.arrowSizeHalf.varRef} * -1)`,\n    }\n\n    for (const property in vars) {\n      state.elements.arrow.style.setProperty(property, vars[property])\n    }\n  }\n}\n\nconst getArrowStyle = (placement: Placement) => {\n  if (placement.startsWith(\"top\")) {\n    return { property: \"bottom\", value: cssVars.arrowOffset.varRef }\n  }\n  if (placement.startsWith(\"bottom\")) {\n    return { property: \"top\", value: cssVars.arrowOffset.varRef }\n  }\n  if (placement.startsWith(\"left\")) {\n    return { property: \"right\", value: cssVars.arrowOffset.varRef }\n  }\n  if (placement.startsWith(\"right\")) {\n    return { property: \"left\", value: cssVars.arrowOffset.varRef }\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n  The inner arrow modifier, sets the placement styles for the inner arrow that forms\n  the popper arrow tip.\n* -----------------------------------------------------------------------------------------------*/\n\nexport const innerArrow: Modifier<\"innerArrow\", any> = {\n  name: \"innerArrow\",\n  enabled: true,\n  phase: \"main\",\n  requires: [\"arrow\"],\n  fn: ({ state }) => {\n    setInnerArrowStyles(state)\n  },\n  effect:\n    ({ state }) =>\n    () => {\n      setInnerArrowStyles(state)\n    },\n}\n\nconst setInnerArrowStyles = (state: State) => {\n  if (!state.elements.arrow) return\n\n  const inner = state.elements.arrow.querySelector(\n    \"[data-popper-arrow-inner]\",\n  ) as HTMLElement | null\n\n  if (!inner) return\n  const boxShadow = getBoxShadow(state.placement)\n  if (boxShadow) {\n    inner.style.setProperty(\"--popper-arrow-default-shadow\", boxShadow)\n  }\n\n  Object.assign(inner.style, {\n    transform: \"rotate(45deg)\",\n    background: cssVars.arrowBg.varRef,\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    position: \"absolute\",\n    zIndex: \"inherit\",\n    boxShadow: `var(--popper-arrow-shadow, var(--popper-arrow-default-shadow))`,\n  })\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}