{"ast":null,"code":"'use client';\n\nimport { __publicField, getNextIndex, getPrevIndex, isElement, sortNodes } from \"./chunk-3A5YOZDU.mjs\";\n\n// src/descendant.ts\nvar DescendantsManager = class {\n  constructor() {\n    var _this = this;\n    __publicField(this, \"descendants\", /* @__PURE__ */new Map());\n    __publicField(this, \"register\", nodeOrOptions => {\n      if (nodeOrOptions == null) return;\n      if (isElement(nodeOrOptions)) {\n        return this.registerNode(nodeOrOptions);\n      }\n      return node => {\n        this.registerNode(node, nodeOrOptions);\n      };\n    });\n    __publicField(this, \"unregister\", node => {\n      this.descendants.delete(node);\n      const sorted = sortNodes(Array.from(this.descendants.keys()));\n      this.assignIndex(sorted);\n    });\n    __publicField(this, \"destroy\", () => {\n      this.descendants.clear();\n    });\n    __publicField(this, \"assignIndex\", descendants => {\n      this.descendants.forEach(descendant => {\n        const index = descendants.indexOf(descendant.node);\n        descendant.index = index;\n        descendant.node.dataset[\"index\"] = descendant.index.toString();\n      });\n    });\n    __publicField(this, \"count\", () => this.descendants.size);\n    __publicField(this, \"enabledCount\", () => this.enabledValues().length);\n    __publicField(this, \"values\", () => {\n      const values = Array.from(this.descendants.values());\n      return values.sort((a, b) => a.index - b.index);\n    });\n    __publicField(this, \"enabledValues\", () => {\n      return this.values().filter(descendant => !descendant.disabled);\n    });\n    __publicField(this, \"item\", index => {\n      if (this.count() === 0) return void 0;\n      return this.values()[index];\n    });\n    __publicField(this, \"enabledItem\", index => {\n      if (this.enabledCount() === 0) return void 0;\n      return this.enabledValues()[index];\n    });\n    __publicField(this, \"first\", () => this.item(0));\n    __publicField(this, \"firstEnabled\", () => this.enabledItem(0));\n    __publicField(this, \"last\", () => this.item(this.descendants.size - 1));\n    __publicField(this, \"lastEnabled\", () => {\n      const lastIndex = this.enabledValues().length - 1;\n      return this.enabledItem(lastIndex);\n    });\n    __publicField(this, \"indexOf\", node => {\n      var _a, _b;\n      if (!node) return -1;\n      return (_b = (_a = this.descendants.get(node)) == null ? void 0 : _a.index) != null ? _b : -1;\n    });\n    __publicField(this, \"enabledIndexOf\", node => {\n      if (node == null) return -1;\n      return this.enabledValues().findIndex(i => i.node.isSameNode(node));\n    });\n    __publicField(this, \"next\", function (index) {\n      let loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      const next = getNextIndex(index, _this.count(), loop);\n      return _this.item(next);\n    });\n    __publicField(this, \"nextEnabled\", function (index) {\n      let loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      const item = _this.item(index);\n      if (!item) return;\n      const enabledIndex = _this.enabledIndexOf(item.node);\n      const nextEnabledIndex = getNextIndex(enabledIndex, _this.enabledCount(), loop);\n      return _this.enabledItem(nextEnabledIndex);\n    });\n    __publicField(this, \"prev\", function (index) {\n      let loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      const prev = getPrevIndex(index, _this.count() - 1, loop);\n      return _this.item(prev);\n    });\n    __publicField(this, \"prevEnabled\", function (index) {\n      let loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      const item = _this.item(index);\n      if (!item) return;\n      const enabledIndex = _this.enabledIndexOf(item.node);\n      const prevEnabledIndex = getPrevIndex(enabledIndex, _this.enabledCount() - 1, loop);\n      return _this.enabledItem(prevEnabledIndex);\n    });\n    __publicField(this, \"registerNode\", (node, options) => {\n      if (!node || this.descendants.has(node)) return;\n      const keys = Array.from(this.descendants.keys()).concat(node);\n      const sorted = sortNodes(keys);\n      if (options == null ? void 0 : options.disabled) {\n        options.disabled = !!options.disabled;\n      }\n      const descendant = {\n        node,\n        index: -1,\n        ...options\n      };\n      this.descendants.set(node, descendant);\n      this.assignIndex(sorted);\n    });\n  }\n};\nexport { DescendantsManager };","map":{"version":3,"mappings":"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","names":["DescendantsManager","constructor","__publicField","Map","nodeOrOptions","isElement","registerNode","node","descendants","delete","sorted","sortNodes","Array","from","keys","assignIndex","clear","forEach","descendant","index","indexOf","dataset","toString","size","enabledValues","length","values","sort","a","b","filter","disabled","count","enabledCount","item","enabledItem","lastIndex","_b","get","findIndex","i","isSameNode","loop","next","getNextIndex","_this","enabledIndex","enabledIndexOf","nextEnabledIndex","prev","getPrevIndex","prevEnabledIndex","options","has","concat","set"],"sources":["C:\\Users\\Admin\\Documents\\Web\\Web3.0\\Uniswap-Clone\\dexStarter\\dex\\node_modules\\@chakra-ui\\descendant\\src\\descendant.ts"],"sourcesContent":["import { sortNodes, isElement, getNextIndex, getPrevIndex } from \"./utils\"\n\nexport type DescendantOptions<T = {}> = T & {\n  /**\n   * If `true`, the item will be registered in all nodes map\n   * but omitted from enabled nodes map\n   */\n  disabled?: boolean\n  /**\n   * The id of the item\n   */\n  id?: string\n}\n\nexport type Descendant<T, K> = DescendantOptions<K> & {\n  /**\n   * DOM element of the item\n   */\n  node: T\n  /**\n   * index of item in all nodes map and enabled nodes map\n   */\n  index: number\n}\n\n/**\n * @internal\n *\n * Class to manage descendants and their relative indices in the DOM.\n * It uses `node.compareDocumentPosition(...)` under the hood\n */\nexport class DescendantsManager<\n  T extends HTMLElement,\n  K extends Record<string, any> = {},\n> {\n  private descendants = new Map<T, Descendant<T, K>>()\n\n  register = (nodeOrOptions: T | null | DescendantOptions<K>) => {\n    if (nodeOrOptions == null) return\n\n    if (isElement(nodeOrOptions)) {\n      return this.registerNode(nodeOrOptions)\n    }\n\n    return (node: T | null) => {\n      this.registerNode(node, nodeOrOptions)\n    }\n  }\n\n  unregister = (node: T) => {\n    this.descendants.delete(node)\n    const sorted = sortNodes(Array.from(this.descendants.keys()))\n    this.assignIndex(sorted)\n  }\n\n  destroy = () => {\n    this.descendants.clear()\n  }\n\n  private assignIndex = (descendants: Node[]) => {\n    this.descendants.forEach((descendant) => {\n      const index = descendants.indexOf(descendant.node)\n      descendant.index = index\n      descendant.node.dataset[\"index\"] = descendant.index.toString()\n    })\n  }\n\n  count = () => this.descendants.size\n\n  enabledCount = () => this.enabledValues().length\n\n  values = () => {\n    const values = Array.from(this.descendants.values())\n    return values.sort((a, b) => a.index - b.index)\n  }\n\n  enabledValues = () => {\n    return this.values().filter((descendant) => !descendant.disabled)\n  }\n\n  item = (index: number) => {\n    if (this.count() === 0) return undefined\n    return this.values()[index]\n  }\n\n  enabledItem = (index: number) => {\n    if (this.enabledCount() === 0) return undefined\n    return this.enabledValues()[index]\n  }\n\n  first = () => this.item(0)\n\n  firstEnabled = () => this.enabledItem(0)\n\n  last = () => this.item(this.descendants.size - 1)\n\n  lastEnabled = () => {\n    const lastIndex = this.enabledValues().length - 1\n    return this.enabledItem(lastIndex)\n  }\n\n  indexOf = (node: T | null) => {\n    if (!node) return -1\n    return this.descendants.get(node)?.index ?? -1\n  }\n\n  enabledIndexOf = (node: T | null) => {\n    if (node == null) return -1\n    return this.enabledValues().findIndex((i) => i.node.isSameNode(node))\n  }\n\n  next = (index: number, loop = true) => {\n    const next = getNextIndex(index, this.count(), loop)\n    return this.item(next)\n  }\n\n  nextEnabled = (index: number, loop = true) => {\n    const item = this.item(index)\n    if (!item) return\n    const enabledIndex = this.enabledIndexOf(item.node)\n    const nextEnabledIndex = getNextIndex(\n      enabledIndex,\n      this.enabledCount(),\n      loop,\n    )\n    return this.enabledItem(nextEnabledIndex)\n  }\n\n  prev = (index: number, loop = true) => {\n    const prev = getPrevIndex(index, this.count() - 1, loop)\n    return this.item(prev)\n  }\n\n  prevEnabled = (index: number, loop = true) => {\n    const item = this.item(index)\n    if (!item) return\n    const enabledIndex = this.enabledIndexOf(item.node)\n    const prevEnabledIndex = getPrevIndex(\n      enabledIndex,\n      this.enabledCount() - 1,\n      loop,\n    )\n    return this.enabledItem(prevEnabledIndex)\n  }\n\n  private registerNode = (node: T | null, options?: DescendantOptions<K>) => {\n    if (!node || this.descendants.has(node)) return\n\n    const keys = Array.from(this.descendants.keys()).concat(node)\n    const sorted = sortNodes(keys)\n\n    if (options?.disabled) {\n      options.disabled = !!options.disabled\n    }\n\n    const descendant = { node, index: -1, ...options }\n\n    this.descendants.set(node, descendant as Descendant<T, K>)\n\n    this.assignIndex(sorted)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}